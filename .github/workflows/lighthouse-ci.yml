name: Lighthouse CI

on:
  pull_request_target:
    branches:
      - master
    types: [opened, reopened, synchronize, ready_for_review]

jobs:
  lighthouse-ci:
    name: Lighthouse CI
    runs-on: ubuntu-latest

    steps:
      - if: >
          !github.event.pull_request.draft && !(
            (github.actor == 'asyncapi-bot' && (
              startsWith(github.event.pull_request.title, 'ci: update global workflows') || 
              startsWith(github.event.pull_request.title, 'chore: update code of conduct') || 
              startsWith(github.event.pull_request.title, 'ci: update global contribution guide') || 
              startsWith(github.event.pull_request.title, 'ci: update workflows for go projects') || 
              startsWith(github.event.pull_request.title, 'ci: update workflows for nodejs projects') || 
              startsWith(github.event.pull_request.title, 'ci: update release-related workflows for nodejs projects') || 
              startsWith(github.event.pull_request.title, 'ci: update semantic release config file') || 
              startsWith(github.event.pull_request.title, 'ci: update generic workflows') || 
              startsWith(github.event.pull_request.title, 'ci: update workflows for docker-based projects') ||
              startsWith(github.event.pull_request.title, 'chore(release):')
            )) ||
            (github.actor == 'allcontributors[bot]' && 
              startsWith(github.event.pull_request.title, 'docs: add')
            )
          )
        id: should_run
        name: Should Run
        run: echo "shouldrun=true" >> $GITHUB_OUTPUT

      - if: steps.should_run.outputs.shouldrun == 'true'
        uses: actions/checkout@v4

      - if: steps.should_run.outputs.shouldrun == 'true'
        name: Await Netlify Preview
        uses: jakepartusch/wait-for-netlify-action@v1.4
        id: netlify
        with:
          site_name: "asyncapi-website"
          max_timeout: 600

      - if: steps.should_run.outputs.shouldrun == 'true'
        name: Run Lighthouse Audit
        id: lighthouse
        uses: foo-software/lighthouse-check-action@a80267da2e0244b8a2e457a8575fc47590615852
        with:
          outputDirectory: ./lighthouse-results
          urls: |
            https://deploy-preview-${{ github.event.pull_request.number }}--asyncapi-website.netlify.app/
          emulatedFormFactor: desktop

      - if: steps.should_run.outputs.shouldrun == 'true'
        name: Upload Lighthouse Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse_results
          path: ./lighthouse-results

      - if: steps.should_run.outputs.shouldrun == 'true'
        name: Lighthouse Score Report
        id: lighthouse_score_report
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = './lighthouse-results/lighthouse.report.json';
            if (!fs.existsSync(path)) {
              core.setOutput("comment", "‚ùå Lighthouse report not found.");
              return;
            }
            const report = JSON.parse(fs.readFileSync(path, 'utf8'));
            const categories = report.categories;
            const score = val => val >= 0.9 ? 'üü¢' : val >= 0.5 ? 'üü†' : 'üî¥';
            const format = val => Math.round(val * 100);

            const comment = [
              `‚ö°Ô∏è **Lighthouse report** for the changes in this PR:`,
              '| Category | Score |',
              '| --- | --- |',
              `| ${score(categories.performance.score)} Performance | ${format(categories.performance.score)} |`,
              `| ${score(categories.accessibility.score)} Accessibility | ${format(categories.accessibility.score)} |`,
              `| ${score(categories["best-practices"].score)} Best Practices | ${format(categories["best-practices"].score)} |`,
              `| ${score(categories.seo.score)} SEO | ${format(categories.seo.score)} |`,
              `| ${score(categories.pwa.score)} PWA | ${format(categories.pwa.score)} |`,
              '',
              '*Generated from local audit report*'
            ].join('\n');

            core.setOutput("comment", comment);

      - if: steps.should_run.outputs.shouldrun == 'true'
        name: Lighthouse Statistic Comment
        uses: marocchino/sticky-pull-request-comment@v2.8.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ github.event.pull_request.number }}
          header: lighthouse
          message: ${{ steps.lighthouse_score_report.outputs.comment }}
