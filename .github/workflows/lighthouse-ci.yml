name: Lighthouse CI

on:
  pull_request_target:
    branches:
      - test_lighthouse
    types: [opened, reopened, synchronize, ready_for_review]

jobs:
  lighthouse-ci:
    name: Lighthouse CI
    runs-on: ubuntu-latest

    steps:
      - if: >
          !github.event.pull_request.draft && !(
            (github.actor == 'asyncapi-bot' && (
              startsWith(github.event.pull_request.title, 'ci: update global workflows') || 
              startsWith(github.event.pull_request.title, 'chore: update code of conduct') || 
              startsWith(github.event.pull_request.title, 'ci: update global contribution guide') || 
              startsWith(github.event.pull_request.title, 'ci: update workflows for go projects') || 
              startsWith(github.event.pull_request.title, 'ci: update workflows for nodejs projects') || 
              startsWith(github.event.pull_request.title, 'ci: update release-related workflows for nodejs projects') || 
              startsWith(github.event.pull_request.title, 'ci: update semantic release config file') || 
              startsWith(github.event.pull_request.title, 'ci: update generic workflows') || 
              startsWith(github.event.pull_request.title, 'ci: update workflows for docker-based projects') ||
              startsWith(github.event.pull_request.title, 'chore(release):')
            )) ||
            (github.actor == 'allcontributors[bot]' && 
              startsWith(github.event.pull_request.title, 'docs: add')
            )
          )
        id: should_run
        name: Should Run
        run: echo "shouldrun=true" >> $GITHUB_OUTPUT

      - if: steps.should_run.outputs.shouldrun == 'true'
        uses: actions/checkout@v4

      - if: steps.should_run.outputs.shouldrun == 'true'
        name: Run Lighthouse Audit
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@2f8dda6cf4de7d73b29853c3f29e73a01e297bd8
        with:
          urls: |
            https://deploy-preview-4126--asyncapi-website.netlify.app/
          configPath: ./.github/workflows/lighthouserc.json
          uploadArtifacts: false   # disable built-in upload
          temporaryPublicStorage: false


      - if: steps.should_run.outputs.shouldrun == 'true'
        name: Debug Output Paths
        run: |
          echo "Current Directory: $(pwd)"
          echo "List of Files:"
          ls -R

      - if: steps.should_run.outputs.shouldrun == 'true'
        name: Upload Lighthouse Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse_results
          path: .lighthouseci

      - if: steps.should_run.outputs.shouldrun == 'true'
        name: Lighthouse Score Report
        id: lighthouse_score_report
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = '.lighthouseci/lhr-0.report.json';
            if (!fs.existsSync(path)) {
              return core.setOutput("comment", "‚ùå Lighthouse report not found.");
            }

            const report = JSON.parse(fs.readFileSync(path, 'utf8'));
            const categories = report.categories;

            function score(val) {
              return val >= 0.9 ? 'üü¢' : val >= 0.5 ? 'üü†' : 'üî¥';
            }

            function format(val) {
              return Math.round(val * 100);
            }

            const lines = [
              `‚ö°Ô∏è **Lighthouse report** for the changes in this PR:`,
              '| Category | Score |',
              '| --- | --- |',
              `| ${score(categories.performance.score)} Performance | ${format(categories.performance.score)} |`,
              `| ${score(categories.accessibility.score)} Accessibility | ${format(categories.accessibility.score)} |`,
              `| ${score(categories["best-practices"].score)} Best Practices | ${format(categories["best-practices"].score)} |`,
              `| ${score(categories.seo.score)} SEO | ${format(categories.seo.score)} |`
            ];

            if (categories.pwa) {
              lines.push(`| ${score(categories.pwa.score)} PWA | ${format(categories.pwa.score)} |`);
            }

            lines.push('', '*Generated from Lighthouse JSON audit*');

            const comment = lines.join('\n');
            core.setOutput("comment", comment);
