(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{"6ahj":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return u}));var r,a=n("wx14"),o=n("Ff2n"),s=n("q1tI"),i=n.n(s),c=n("7ljp"),b=(i.a.createElement,r="YouTube",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),Object(c.b)("div",e)}),p={},l="wrapper";function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(c.b)(l,Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"All developers, architects, and product managers are used to REST APIs and the synchronous paradigm of communication. You make a request and wait for the response. This is exactly how the web works. You enter a URL (e.g., google.com) in the address bar of your favorite browser and it sends a request to the server. Following, the server sends the response with the content of the website. ",Object(c.b)("strong",{parentName:"p"},"The web is the greatest implementation of a REST API.")),Object(c.b)("p",null,"However, there are certain situations when you don't really need a response from the server. At least no other than the confirmation the request has been received. This is also called ",Object(c.b)("em",{parentName:"p"},'"fire and forget"'),", and it's really useful when you just want to communicate or inform that \"something happened.\" It is, you're not requesting or asking for anything, thus you don't need a response.  Examples of this are:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A user just signed up."),Object(c.b)("li",{parentName:"ul"},"You have a new follower."),Object(c.b)("li",{parentName:"ul"},"Your fridge is getting empty.")),Object(c.b)("p",null,"Along with the event, you may also want to send ",Object(c.b)("em",{parentName:"p"},"extra information"),". For instance:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A user just signed up: here's the user information (e.g., name, email, age, etc.)"),Object(c.b)("li",{parentName:"ul"},"You have a new follower: here are the details of the follower (e.g., username, name, picture, etc.)"),Object(c.b)("li",{parentName:"ul"},'Your fridge is getting empty: here\'s the percentage of "emptiness" (e.g., 23%)')),Object(c.b)("p",null,"This extra information is often referred to as ",Object(c.b)("em",{parentName:"p"},"event payload")," or ",Object(c.b)("em",{parentName:"p"},"message payload"),"."),Object(c.b)("h2",{id:"core-concepts"},"Core concepts"),Object(c.b)("p",null,Object(c.b)("img",Object(a.a)({parentName:"p"},{src:"/img/diagrams/simple-event-driven.webp",alt:null}))),Object(c.b)("p",null,"In most cases, Event-Driven Architectures (EDAs) are broker-centric, like in the diagram above. In it you can find some new concepts, so let's go through them now."),Object(c.b)("h3",{id:"message-broker"},"Message broker"),Object(c.b)("p",null,"A message broker (or ",Object(c.b)("em",{parentName:"p"},'"broker"'),") is a piece of infrastructure in charge of receiving messages and delivering them to those who have shown interest. They often store messages until they are delivered, what makes EDAs very resilient to failures. Examples of brokers are ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://rabbitmq.com"}),"RabbitMQ"),", ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"http://kafka.apache.org/"}),"Apache Kafka"),", ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"http://solace.com"}),"Solace"),", etc."),Object(c.b)("h3",{id:"publishersubscriber"},"Publisher/Subscriber"),Object(c.b)("p",null,"A publisher (a.k.a. ",Object(c.b)("em",{parentName:"p"},"producer"),") is an application that sends messages to the ",Object(c.b)("em",{parentName:"p"},"broker"),"."),Object(c.b)("p",null,"A subscriber (a.k.a. ",Object(c.b)("em",{parentName:"p"},"consumer"),") is an application that connects to the ",Object(c.b)("em",{parentName:"p"},"broker"),", manifests interest in certain type of messages, and leaves the connection open so the ",Object(c.b)("em",{parentName:"p"},"broker")," can push messages to them."),Object(c.b)("h3",{id:"message"},"Message"),Object(c.b)("p",null,"A message is a piece of information that's sent by the publishers to the broker, and received by all the interested subscribers. The content of the message can be anything but they are frequently catalogued as ",Object(c.b)("em",{parentName:"p"},"events")," and ",Object(c.b)("em",{parentName:"p"},"commands"),". As we saw above, ",Object(c.b)("em",{parentName:"p"},"events")," communicate a fact that occurred. Instead, ",Object(c.b)("em",{parentName:"p"},"commands")," are very much like ",Object(c.b)("em",{parentName:"p"},"requests"),' in REST APIs: they tell the subscribers "do this".'),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Technically speaking, ",Object(c.b)("em",{parentName:"strong"},"events")," and ",Object(c.b)("em",{parentName:"strong"},"commands")," are the same. The only difference is in their semantics.")),Object(c.b)("h3",{id:"channels"},"Channels"),Object(c.b)("p",null,"One detail that might pass unnoticed from the diagram above is the existence of ",Object(c.b)("em",{parentName:"p"},"channels"),". All the ",Object(c.b)("em",{parentName:"p"},"brokers")," support communication through multiple channels. The industry doesn't have a common term though so you may find them as ",Object(c.b)("em",{parentName:"p"},"topics"),", ",Object(c.b)("em",{parentName:"p"},"routing keys"),", ",Object(c.b)("em",{parentName:"p"},"event types"),", and probably other ones I'm missing."),Object(c.b)("p",null,"They're usually assigned a name or identifier (e.g., ",Object(c.b)("inlineCode",{parentName:"p"},"user_signed_up"),") and it's often a good practice to send a single type of message through them. Think about TV or radio channels: the BBC only broadcasts its information through an assigned channel. If the broadcasters (publishers) didn't respect that rule you (the subscriber) would only see and hear interferences."),Object(c.b)("h2",{id:"why-event-driven-and-not-message-driven"},'Why "event-driven" and not "message-driven"?'),Object(c.b)("p",null,"You will find both used interchangeably, although they are not exactly the same. You will even find ",Object(c.b)("em",{parentName:"p"},'"message-based"')," and ",Object(c.b)("em",{parentName:"p"},'"event-based"'),". In practice, chances are they all refer to the same thing."),Object(c.b)("p",null,"Theoretically, ",Object(c.b)("em",{parentName:"p"},'"message-driven"')," is the most generic term, meaning you may use events and commands, while ",Object(c.b)("em",{parentName:"p"},"event-driven")," means that it's purely about events. However, that's not always the case, as Martin Fowler explains in his talk ",Object(c.b)("em",{parentName:"p"},'"the many meanings of event-driven architecture"'),":"),Object(c.b)(b,{id:"STKCRSUsyP0",mdxType:"YouTube"}),Object(c.b)("h2",{id:"conclusion"},"Conclusion"),Object(c.b)("p",null,"We've seen what an event-driven architecture is, how it works, and what are their components. AsyncAPI is all about defining and documenting each of these components."),Object(c.b)("p",null,"Check out our ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/getting-started/"}),"getting started guide")," to learn more."))}u.isMDXComponent=!0},"7ljp":function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return d}));var r=n("q1tI"),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var b=a.a.createContext({}),p=function(e){var t=a.a.useContext(b),n=t;return e&&(n="function"===typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return(a.a.createElement(b.Provider,{value:t},e.children))},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return(a.a.createElement(a.a.Fragment,{},t))}},h=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),l=p(n),u=r,h=l["".concat(s,".").concat(u)]||l[u]||m[u]||o;return n?a.a.createElement(h,i(i({ref:t},b),{},{components:n})):a.a.createElement(h,i({ref:t},b))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"===typeof e||r){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"===typeof e?e:r,s[1]=i;for(var b=2;b<o;b++)s[b]=n[b];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},Ff2n:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}n.d(t,"a",(function(){return r}))},Qetd:function(e,t,n){"use strict";var r=Object.assign.bind(Object);e.exports=r,e.exports.default=e.exports},uQ1W:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/getting-started-with-event-driven-architectures",function(){return n("6ahj")}])},wx14:function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))}},[["uQ1W",0,1]]]);