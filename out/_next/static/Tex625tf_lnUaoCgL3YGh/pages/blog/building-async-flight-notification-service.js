(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{"7ljp":function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var a=n("q1tI"),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),u=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"===typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return(i.a.createElement(l.Provider,{value:t},e.children))},b="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return(i.a.createElement(i.a.Fragment,{},t))}},m=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(n),b=a,m=p["".concat(o,".").concat(b)]||p[b]||h[b]||r;return n?i.a.createElement(m,s(s({ref:t},l),{},{components:n})):i.a.createElement(m,s({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"===typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[b]="string"===typeof e?e:a,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},"B/I/":function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/building-async-flight-notification-service",function(){return n("zasa")}])},Ff2n:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}n.d(t,"a",(function(){return a}))},Qetd:function(e,t,n){"use strict";var a=Object.assign.bind(Object);e.exports=a,e.exports.default=e.exports},wx14:function(e,t,n){"use strict";function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return a}))},zasa:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return u}));var a=n("wx14"),i=n("Ff2n"),r=n("q1tI"),o=n.n(r),s=n("7ljp"),c=(o.a.createElement,{}),l="wrapper";function u(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(s.b)(l,Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Flight delays, cancelations and gate changes are among the most common headaches that travelers face. Now more so than ever, travelers need this information literally at hand to enjoy a stress-free trip."),Object(s.b)("p",null,"With this in mind, we decided to build a small prototype to implement an asynchronous scheduling notification service. The prototype will be implemented following the microservices architecture paradigm with the following services and requirements in mind:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"All services should communicate asynchronously via the ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://mqtt.org/"}),"MQTT")," protocol, a\u202flightweight publish-subscribe messaging pattern. Messages should be correctly defined and documented following AsyncAPI specs. ")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"A ",Object(s.b)("strong",{parentName:"p"},"Monitor service")," receives and queues flight information and queries the REST\u202fAPI\u202fto\u202fdetect changes.\u202fWhen it detects a change, it notifies subscribers.\u202fFlight schedule information is retrieved from the ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://developers.amadeus.com/self-service/category/air/api-doc/on-demand-flight-status"}),"Flight Status API")," from Amadeus for Developers.")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"A ",Object(s.b)("strong",{parentName:"p"},"Notifier service")," receives\u202fthe notifications\u202fand\u202falerts the user\u202fvia SMS.\u202fAlerts are sent using the ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.twilio.com/docs/sms/api"}),"Twilio SMS API"),".")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"A ",Object(s.b)("strong",{parentName:"p"},"Subscriber service")," provides a simple web interface so users can\u202fsubscribe to flight status updates."))),Object(s.b)("h2",{id:"defining-messages-with-asyncapi"},"Defining messages with AsyncAPI"),Object(s.b)("p",null,"First, we\u2019ll define two messages to model the events managed by subscribers\u202fand publishers:"),Object(s.b)("p",null,"A ",Object(s.b)("inlineCode",{parentName:"p"},"flightQueue")," message to queue a new flight to be monitored for status changes. This event is composed of two main\u202fschemas:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"user")," \u2013 to model information about the user subscribing to the notifications (name and phone number):\u202f")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"type: object \nproperties: \n    userName: \n        type: string \n        minimum: 1 \n    phoneNumber: \n        type: string \n        description: phone number where notifications will be received.\n")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"flight")," - to\u202fmodel\u202f information about the\u202fflight\u202fbeing\u202fmonitored (carrier code, flight number and departure date).")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'type: object \nproperties: \n    carrierCode: \n        type: string \n        description: 2 to 3-character IATA carrier code \n        example: "LH" \n    flightNumber: \n        type: integer \n        minimum: 1 \n        description: 1 to 4-digit number of the flight \n        example: "193" \n    scheduledDepartureDate: \n        type: string \n        format: date-time \n        description: scheduled departure date of the flight, local to the departure airport. \n        example: "2020-10-20" \n')),Object(s.b)("p",null,"A ",Object(s.b)("inlineCode",{parentName:"p"},"flightStatus")," message to notify about changes. When\u202fthe service\u202fdetects\u202fa change in\u202fflight status, it triggers\u202fa\u202fnotification event to\u202falert\u202fthe user.\u202fThe payload of the ",Object(s.b)("inlineCode",{parentName:"p"},"flightStatus"),"\u202fmessage consists\u202fof\u202fthe following structure:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("inlineCode",{parentName:"p"},"flight")," and ",Object(s.b)("inlineCode",{parentName:"p"},"user")," schemas (the same as in the ",Object(s.b)("inlineCode",{parentName:"p"},"flightQueue")," message) to\u202fidentify\u202fthe flight emitting the event and the user receiving the notification.")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},"Two\u202f",Object(s.b)("inlineCode",{parentName:"p"},"segment"),"\u202fschemas\u202fcorresponding to the origin and destination. This lets us notify\u202fabout changes\u202fto\u202fboth\u202fdeparture and arrival.\u202f"))),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'type: object \nproperties: \n  iataCode: \n    type: string \n    description: 2 to 3-character IATA carrier code \n    example: "MAD" \n  scheduledDate: \n    type: string \n    format: date-time \n    description: scheduled datetime of the flight, local to the airport. \n    example: "2020-10-20 19:15" \n  gate: \n    type: string \n    description: departure gate\n    example: "2D" \n  terminal: \n    type: string \n    description: airport terminal \n    example: "4" \n')),Object(s.b)("p",null,"Messages are shared among services so it\u2019s important to correctly organize the YAML definition files under a common folder. In our case, we call it common:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"    common/\n        messages/\n            flight_queue.yaml\n            flight_status.yaml\n        schemas/\n            flight.yaml\n            segment.yaml\n            user.yaml\n")),Object(s.b)("p",null,"Services communicate through channels using the publish/subscribe pattern. Our architecture uses two different channels:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"flight/queue")," to manage and queue the flights to be monitored."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"flight/update")," to manage the notifications about flight updates.")),Object(s.b)("p",null,"Each service contains an ",Object(s.b)("inlineCode",{parentName:"p"},"asyncapi.yaml")," file with the description of the service and server and channel information. Let's take a look to the final ",Object(s.b)("inlineCode",{parentName:"p"},"asyncapi.yaml")," file of the Subscriber service to see how the messages and channels are organized:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"asyncapi: '2.0.0'\ninfo:\n  title: Flight Subscriber Service\n  version: '1.0.0'\n  description: |\n     Allows users to subscribe events from a given flight\n  license:\n    name: Apache 2.0\n    url: 'https://www.apache.org/licenses/LICENSE-2.0'\nservers:\n  development:\n    url: mqtt://localhost:1883\n    protocol: mqtt\nchannels:\n  flight/queue:\n    description: |\n      queue flight in order to retrieve status\n    subscribe:\n      summary: Receive information about the flight that should be monitored for changes\n      message:\n        $ref: '#/components/messages/flightQueue'\ncomponents:\n  messages:\n    flightQueue:\n      $ref: '../common/messages/flight_queue.yaml'\n")),Object(s.b)("p",null,"When the user provides their flight information, the Subscriber service emits a ",Object(s.b)("inlineCode",{parentName:"p"},"flightQueue")," message that will be received by the Monitor service from the ",Object(s.b)("inlineCode",{parentName:"p"},"flight/queue")," channel. The Notifier service also receives the message and adds the payload to the list of flights to monitor."),Object(s.b)("p",null,"Once the Monitor service detects a change in flight status (e.g. a change in boarding gate), it emits a ",Object(s.b)("inlineCode",{parentName:"p"},"flightStatus")," message to inform subscribers. The Notifier service, which is subscribed to the changes on the ",Object(s.b)("inlineCode",{parentName:"p"},"flight/update")," channel, notifies the end-user by SMS."),Object(s.b)("p",null,"The AsyncAPI specification files for the ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/amadeus4dev/amadeus-async-flight-status/blob/main/monitor/asyncapi.yaml"}),"Monitor Service")," and ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/amadeus4dev/amadeus-async-flight-status/blob/main/notifier/asyncapi.yaml"}),"Notifier Service")," can be found on GitHub."),Object(s.b)("h2",{id:"monitoring-flight-status-information"},"Monitoring flight status information"),Object(s.b)("p",null,"The Monitor service\u202fchecks\u202fthe\u202fstatus\u202fof\u202fthe user\u2019s\u202fflight\u202fby\u202fcalling\u202fthe\u202fOn-Demand Flight Status API, which provides real-time flight schedule information like departure/arrival times, gate, or terminal. A simple cURL request to the API shows how the information is represented:"),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"To get your own authorization token, follow ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://developers.amadeus.com/get-started/get-started-with-self-service-apis-335"}),"this")," guide.")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"curl https://test.api.amadeus.com/v2/schedule/flights?carrierCode=KL&flightNumber=1772scheduledDepartureDate=2021-02-18 -H 'Authorization: Bearer dzh1cpJiFgAlE7iZS'\n")),Object(s.b)("p",null,"In the JSON response, the schedule data of this example has one single segment (a leg of an itinerary, in airline jargon) with several ",Object(s.b)("inlineCode",{parentName:"p"},"flightPoints"),":"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'"flightPoints": [  \n    {  \n        "iataCode": "FRA",  \n        "departure": {  \n            "terminal": {  \n                "code": "1"  \n            },  \n            "gate": {  \n                "mainGate": "B20"  \n            },  \n            "timings": [  \n                {  \n                    "qualifier": "STD",  \n                    "value": "2020-11-05T18:20+01:00"  \n                }  \n            ]  \n        }  \n    },  \n    {  \n        "iataCode": "AMS",  \n        "arrival": {  \n            "terminal": {  \n                "code": "1"  \n            },  \n            "gate": {  \n                "mainGate": "A04"  \n            },  \n            "timings": [  \n                {  \n                    "qualifier": "STA",  \n                    "value": "2020-11-05T19:35+01:00"  \n                }  \n            ]  \n        }  \n    }\n]\n')),Object(s.b)("p",null,"We can see\u202fthat:\u202f "),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"The flight\u202fis scheduled to\u202fdepart\u202ffrom Terminal 1,\u202fGate B22 of Frankfurt International Airport\u202f(FRA)\u202fat 18:20\u202f(UTC+1).\u202f"),Object(s.b)("li",{parentName:"ul"},"It\u202fis scheduled to\u202farrive\u202fat Terminal 1,\u202fGate A04\u202fof\u202fAmsterdam Schiphol Airport\u202f(AMS)\u202fat 19:35 (UTC+1).\u202f")),Object(s.b)("p",null,"The API\u202fis synchronous and therefore needs to be polled\u202fto monitor the\u202fflight status.\u202fThis\u202fisn\u2019t ideal\u202fand\u202fwe\u202fneed a\u202fsolid strategy\u202fto avoid DDoSing the Amadeus backend, using up\u202four\u202ffree call\u202fquota\u202for piling up a massive bill at the end of the month.\u202f"),Object(s.b)("p",null,"To solve this, we put the Monitor service on a separate thread. Every five minutes, the thread checks to see if it\u2019s time to retrieve information from the API and update the status. The Monitor\u202fonly\u202fcalls\u202fthe\u202fAPI\u202fif two conditions are met:\u202f"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"The current date is equal to the departure date.\u202f"),Object(s.b)("li",{parentName:"ul"},"The current time is\u202fwithin\u202f4 hours\u202fof\u202fthe departure time.\u202f")),Object(s.b)("h2",{id:"subscribing-to-flight-updates"},"Subscribing to flight updates"),Object(s.b)("p",null,"The Subscriber service\u202f lets users subscribe to the notifications. We built a simple HTTP\u202fserver\u202fwith Flask to let the user enter their name, phone number and flight information."),Object(s.b)("p",null,"Once the Subscriber service gets a new user subscription, it emits a ",Object(s.b)("inlineCode",{parentName:"p"},"flightQueue")," message with that\u202finformation\u202fin the\u202fpayload\u202fto the broker, so\u202fthat it can be received by the\u202fMonitor."),Object(s.b)("h2",{id:"sending-notifications-to-users"},"Sending notifications to users"),Object(s.b)("p",null,"The Notifier service receives flight status updates from the Monitor and uses the Twilio SMS API to notify the end. The service has a very simple implementation: when the\u202fNotifier receives a\u202f",Object(s.b)("inlineCode",{parentName:"p"},"flightStatus"),"\u202fmessage,\u202fit\u202fuses the message payload to\u202fbuild\u202fan\u202fSMS\u202fmessage:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"client = twilio.Client(account_sid, auth_token)\n\nmsg = build_message(alert_msg['user'],\n                    alert_msg['departure'],\n                    alert_msg['arrival'])\n\ndestination_phone = alert_msg['user']['phoneNumber']\n\nmessage = client.messages.create(body=msg,\n                                 from_=twilio_phone,\n                                 to=destination_phone)\n")),Object(s.b)("h2",{id:"running-the-service"},"Running the service"),Object(s.b)("p",null,"The ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/amadeus4dev/amadeus-async-flight-status"}),"prototype")," runs on four Docker containers \u2013 one per service plus another for the ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/toke/docker-mosquitto"}),"MQTT broker")," based on the Docker image maintained by the Eclipse Mosquitto project."),Object(s.b)("p",null,"To avoid manually starting each service (plus the dependency of starting the broker first), we will use ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.docker.com/compose/"}),"Docker compose"),", a tool to run applications composed of multiple containers using a YAML file to define each container as well as their dependencies."),Object(s.b)("p",null,"We start the service by executing:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"    docker network create my-network\n    docker-compose up --remove-orphans \n")),Object(s.b)("p",null,"In the browser, we go to\u202fhttp://localhost:5000\u202fand enter information about\u202fthe\u202fflight we want\u202fto monitor. The service will send\u202fus\u202fan alert once\u202fthe\u202fflight information is updated:\u202f"),Object(s.b)("p",null,Object(s.b)("img",Object(a.a)({parentName:"p"},{src:"/img/posts/building-async-flight-notification-service/notification-message.webp",alt:"call-to-action"}))),Object(s.b)("h2",{id:"conclusion"},"Conclusion"),Object(s.b)("p",null,"Our prototype\u202fsuccessfully implements our requirements but it\u2019s still far from being ready to use in production. To do so, we\u2019d need to implement authorization, an unsubscribe feature and improve the polling service\u2019s performance, among other improvements."),Object(s.b)("p",null,"However, developing this prototype lets us learn how to specify and document event-driven architecture using AsyncAPI easily."),Object(s.b)("p",null,"You can find the complete source code of the prototype on the GitHub\u202f",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/amadeus4dev/amadeus-async-flight-status"}),"async-flight-status\u202frepository"),". Feel free to clone, modify and improve the implementation!"),Object(s.b)("p",null,"Happy coding!"))}u.isMDXComponent=!0}},[["B/I/",0,1]]]);